// securityistioio
package securityistioio

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/coopnorge/cdk8slibrary/imports/securityistioio/jsii"

	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2"
	"github.com/coopnorge/cdk8slibrary/imports/securityistioio/internal"
)

type AuthorizationPolicy interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for AuthorizationPolicy
type jsiiProxy_AuthorizationPolicy struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_AuthorizationPolicy) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AuthorizationPolicy) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AuthorizationPolicy) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AuthorizationPolicy) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AuthorizationPolicy) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AuthorizationPolicy) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AuthorizationPolicy) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

// Defines a "AuthorizationPolicy" API object.
func NewAuthorizationPolicy(scope constructs.Construct, id *string, props *AuthorizationPolicyProps) AuthorizationPolicy {
	_init_.Initialize()

	j := jsiiProxy_AuthorizationPolicy{}

	_jsii_.Create(
		"securityistioio.AuthorizationPolicy",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Defines a "AuthorizationPolicy" API object.
func NewAuthorizationPolicy_Override(a AuthorizationPolicy, scope constructs.Construct, id *string, props *AuthorizationPolicyProps) {
	_init_.Initialize()

	_jsii_.Create(
		"securityistioio.AuthorizationPolicy",
		[]interface{}{scope, id, props},
		a,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func AuthorizationPolicy_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"securityistioio.AuthorizationPolicy",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Renders a Kubernetes manifest for "AuthorizationPolicy".
//
// This can be used to inline resource manifests inside other objects (e.g. as templates).
func AuthorizationPolicy_Manifest(props *AuthorizationPolicyProps) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"securityistioio.AuthorizationPolicy",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func AuthorizationPolicy_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"securityistioio.AuthorizationPolicy",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func AuthorizationPolicy_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"securityistioio.AuthorizationPolicy",
		"GVK",
		&returns,
	)
	return returns
}

func (a *jsiiProxy_AuthorizationPolicy) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addDependency",
		args,
	)
}

func (a *jsiiProxy_AuthorizationPolicy) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addJsonPatch",
		args,
	)
}

func (a *jsiiProxy_AuthorizationPolicy) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AuthorizationPolicy) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

type AuthorizationPolicyProps struct {
	Metadata *cdk8s.ApiObjectMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// Configuration for access control on workloads.
	//
	// See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
	Spec *AuthorizationPolicySpec `field:"optional" json:"spec" yaml:"spec"`
}

// Configuration for access control on workloads.
//
// See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
type AuthorizationPolicySpec struct {
	// Optional.
	Action AuthorizationPolicySpecAction `field:"optional" json:"action" yaml:"action"`
	// Specifies detailed configuration of the CUSTOM action.
	Provider *AuthorizationPolicySpecProvider `field:"optional" json:"provider" yaml:"provider"`
	// Optional.
	Rules *[]*AuthorizationPolicySpecRules `field:"optional" json:"rules" yaml:"rules"`
	// Optional.
	Selector *AuthorizationPolicySpecSelector `field:"optional" json:"selector" yaml:"selector"`
}

// Optional.
type AuthorizationPolicySpecAction string

const (
	// ALLOW.
	AuthorizationPolicySpecAction_ALLOW AuthorizationPolicySpecAction = "ALLOW"
	// DENY.
	AuthorizationPolicySpecAction_DENY AuthorizationPolicySpecAction = "DENY"
	// AUDIT.
	AuthorizationPolicySpecAction_AUDIT AuthorizationPolicySpecAction = "AUDIT"
	// CUSTOM.
	AuthorizationPolicySpecAction_CUSTOM AuthorizationPolicySpecAction = "CUSTOM"
)

// Specifies detailed configuration of the CUSTOM action.
type AuthorizationPolicySpecProvider struct {
	// Specifies the name of the extension provider.
	Name *string `field:"optional" json:"name" yaml:"name"`
}

type AuthorizationPolicySpecRules struct {
	// Optional.
	From *[]*AuthorizationPolicySpecRulesFrom `field:"optional" json:"from" yaml:"from"`
	// Optional.
	To *[]*AuthorizationPolicySpecRulesTo `field:"optional" json:"to" yaml:"to"`
	// Optional.
	When *[]*AuthorizationPolicySpecRulesWhen `field:"optional" json:"when" yaml:"when"`
}

type AuthorizationPolicySpecRulesFrom struct {
	// Source specifies the source of a request.
	Source *AuthorizationPolicySpecRulesFromSource `field:"optional" json:"source" yaml:"source"`
}

// Source specifies the source of a request.
type AuthorizationPolicySpecRulesFromSource struct {
	// Optional.
	IpBlocks *[]*string `field:"optional" json:"ipBlocks" yaml:"ipBlocks"`
	// Optional.
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	// Optional.
	NotIpBlocks *[]*string `field:"optional" json:"notIpBlocks" yaml:"notIpBlocks"`
	// Optional.
	NotNamespaces *[]*string `field:"optional" json:"notNamespaces" yaml:"notNamespaces"`
	// Optional.
	NotPrincipals *[]*string `field:"optional" json:"notPrincipals" yaml:"notPrincipals"`
	// Optional.
	NotRemoteIpBlocks *[]*string `field:"optional" json:"notRemoteIpBlocks" yaml:"notRemoteIpBlocks"`
	// Optional.
	NotRequestPrincipals *[]*string `field:"optional" json:"notRequestPrincipals" yaml:"notRequestPrincipals"`
	// Optional.
	Principals *[]*string `field:"optional" json:"principals" yaml:"principals"`
	// Optional.
	RemoteIpBlocks *[]*string `field:"optional" json:"remoteIpBlocks" yaml:"remoteIpBlocks"`
	// Optional.
	RequestPrincipals *[]*string `field:"optional" json:"requestPrincipals" yaml:"requestPrincipals"`
}

type AuthorizationPolicySpecRulesTo struct {
	// Operation specifies the operation of a request.
	Operation *AuthorizationPolicySpecRulesToOperation `field:"optional" json:"operation" yaml:"operation"`
}

// Operation specifies the operation of a request.
type AuthorizationPolicySpecRulesToOperation struct {
	// Optional.
	Hosts *[]*string `field:"optional" json:"hosts" yaml:"hosts"`
	// Optional.
	Methods *[]*string `field:"optional" json:"methods" yaml:"methods"`
	// Optional.
	NotHosts *[]*string `field:"optional" json:"notHosts" yaml:"notHosts"`
	// Optional.
	NotMethods *[]*string `field:"optional" json:"notMethods" yaml:"notMethods"`
	// Optional.
	NotPaths *[]*string `field:"optional" json:"notPaths" yaml:"notPaths"`
	// Optional.
	NotPorts *[]*string `field:"optional" json:"notPorts" yaml:"notPorts"`
	// Optional.
	Paths *[]*string `field:"optional" json:"paths" yaml:"paths"`
	// Optional.
	Ports *[]*string `field:"optional" json:"ports" yaml:"ports"`
}

type AuthorizationPolicySpecRulesWhen struct {
	// The name of an Istio attribute.
	Key *string `field:"optional" json:"key" yaml:"key"`
	// Optional.
	NotValues *[]*string `field:"optional" json:"notValues" yaml:"notValues"`
	// Optional.
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

// Optional.
type AuthorizationPolicySpecSelector struct {
	MatchLabels *map[string]*string `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type PeerAuthentication interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for PeerAuthentication
type jsiiProxy_PeerAuthentication struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_PeerAuthentication) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PeerAuthentication) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PeerAuthentication) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PeerAuthentication) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PeerAuthentication) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PeerAuthentication) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PeerAuthentication) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

// Defines a "PeerAuthentication" API object.
func NewPeerAuthentication(scope constructs.Construct, id *string, props *PeerAuthenticationProps) PeerAuthentication {
	_init_.Initialize()

	j := jsiiProxy_PeerAuthentication{}

	_jsii_.Create(
		"securityistioio.PeerAuthentication",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Defines a "PeerAuthentication" API object.
func NewPeerAuthentication_Override(p PeerAuthentication, scope constructs.Construct, id *string, props *PeerAuthenticationProps) {
	_init_.Initialize()

	_jsii_.Create(
		"securityistioio.PeerAuthentication",
		[]interface{}{scope, id, props},
		p,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func PeerAuthentication_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"securityistioio.PeerAuthentication",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Renders a Kubernetes manifest for "PeerAuthentication".
//
// This can be used to inline resource manifests inside other objects (e.g. as templates).
func PeerAuthentication_Manifest(props *PeerAuthenticationProps) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"securityistioio.PeerAuthentication",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func PeerAuthentication_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"securityistioio.PeerAuthentication",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func PeerAuthentication_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"securityistioio.PeerAuthentication",
		"GVK",
		&returns,
	)
	return returns
}

func (p *jsiiProxy_PeerAuthentication) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		p,
		"addDependency",
		args,
	)
}

func (p *jsiiProxy_PeerAuthentication) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		p,
		"addJsonPatch",
		args,
	)
}

func (p *jsiiProxy_PeerAuthentication) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		p,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PeerAuthentication) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

type PeerAuthenticationProps struct {
	Metadata *cdk8s.ApiObjectMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// PeerAuthentication defines how traffic will be tunneled (or not) to the sidecar.
	Spec *PeerAuthenticationSpec `field:"optional" json:"spec" yaml:"spec"`
}

// PeerAuthentication defines how traffic will be tunneled (or not) to the sidecar.
type PeerAuthenticationSpec struct {
	// Mutual TLS settings for workload.
	Mtls *PeerAuthenticationSpecMtls `field:"optional" json:"mtls" yaml:"mtls"`
	// Port specific mutual TLS settings.
	PortLevelMtls *map[string]*PeerAuthenticationSpecPortLevelMtls `field:"optional" json:"portLevelMtls" yaml:"portLevelMtls"`
	// The selector determines the workloads to apply the ChannelAuthentication on.
	Selector *PeerAuthenticationSpecSelector `field:"optional" json:"selector" yaml:"selector"`
}

// Mutual TLS settings for workload.
type PeerAuthenticationSpecMtls struct {
	// Defines the mTLS mode used for peer authentication.
	Mode PeerAuthenticationSpecMtlsMode `field:"optional" json:"mode" yaml:"mode"`
}

// Defines the mTLS mode used for peer authentication.
type PeerAuthenticationSpecMtlsMode string

const (
	// UNSET.
	PeerAuthenticationSpecMtlsMode_UNSET PeerAuthenticationSpecMtlsMode = "UNSET"
	// DISABLE.
	PeerAuthenticationSpecMtlsMode_DISABLE PeerAuthenticationSpecMtlsMode = "DISABLE"
	// PERMISSIVE.
	PeerAuthenticationSpecMtlsMode_PERMISSIVE PeerAuthenticationSpecMtlsMode = "PERMISSIVE"
	// STRICT.
	PeerAuthenticationSpecMtlsMode_STRICT PeerAuthenticationSpecMtlsMode = "STRICT"
)

type PeerAuthenticationSpecPortLevelMtls struct {
	// Defines the mTLS mode used for peer authentication.
	Mode PeerAuthenticationSpecPortLevelMtlsMode `field:"optional" json:"mode" yaml:"mode"`
}

// Defines the mTLS mode used for peer authentication.
type PeerAuthenticationSpecPortLevelMtlsMode string

const (
	// UNSET.
	PeerAuthenticationSpecPortLevelMtlsMode_UNSET PeerAuthenticationSpecPortLevelMtlsMode = "UNSET"
	// DISABLE.
	PeerAuthenticationSpecPortLevelMtlsMode_DISABLE PeerAuthenticationSpecPortLevelMtlsMode = "DISABLE"
	// PERMISSIVE.
	PeerAuthenticationSpecPortLevelMtlsMode_PERMISSIVE PeerAuthenticationSpecPortLevelMtlsMode = "PERMISSIVE"
	// STRICT.
	PeerAuthenticationSpecPortLevelMtlsMode_STRICT PeerAuthenticationSpecPortLevelMtlsMode = "STRICT"
)

// The selector determines the workloads to apply the ChannelAuthentication on.
type PeerAuthenticationSpecSelector struct {
	MatchLabels *map[string]*string `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type RequestAuthentication interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for RequestAuthentication
type jsiiProxy_RequestAuthentication struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_RequestAuthentication) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RequestAuthentication) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RequestAuthentication) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RequestAuthentication) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RequestAuthentication) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RequestAuthentication) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RequestAuthentication) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

// Defines a "RequestAuthentication" API object.
func NewRequestAuthentication(scope constructs.Construct, id *string, props *RequestAuthenticationProps) RequestAuthentication {
	_init_.Initialize()

	j := jsiiProxy_RequestAuthentication{}

	_jsii_.Create(
		"securityistioio.RequestAuthentication",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Defines a "RequestAuthentication" API object.
func NewRequestAuthentication_Override(r RequestAuthentication, scope constructs.Construct, id *string, props *RequestAuthenticationProps) {
	_init_.Initialize()

	_jsii_.Create(
		"securityistioio.RequestAuthentication",
		[]interface{}{scope, id, props},
		r,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func RequestAuthentication_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"securityistioio.RequestAuthentication",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Renders a Kubernetes manifest for "RequestAuthentication".
//
// This can be used to inline resource manifests inside other objects (e.g. as templates).
func RequestAuthentication_Manifest(props *RequestAuthenticationProps) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"securityistioio.RequestAuthentication",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func RequestAuthentication_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"securityistioio.RequestAuthentication",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func RequestAuthentication_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"securityistioio.RequestAuthentication",
		"GVK",
		&returns,
	)
	return returns
}

func (r *jsiiProxy_RequestAuthentication) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		r,
		"addDependency",
		args,
	)
}

func (r *jsiiProxy_RequestAuthentication) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		r,
		"addJsonPatch",
		args,
	)
}

func (r *jsiiProxy_RequestAuthentication) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RequestAuthentication) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		r,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

type RequestAuthenticationProps struct {
	Metadata *cdk8s.ApiObjectMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// RequestAuthentication defines what request authentication methods are supported by a workload.
	Spec *RequestAuthenticationSpec `field:"optional" json:"spec" yaml:"spec"`
}

// RequestAuthentication defines what request authentication methods are supported by a workload.
type RequestAuthenticationSpec struct {
	// Define the list of JWTs that can be validated at the selected workloads' proxy.
	JwtRules *[]*RequestAuthenticationSpecJwtRules `field:"optional" json:"jwtRules" yaml:"jwtRules"`
	// Optional.
	Selector *RequestAuthenticationSpecSelector `field:"optional" json:"selector" yaml:"selector"`
}

type RequestAuthenticationSpecJwtRules struct {
	Audiences *[]*string `field:"optional" json:"audiences" yaml:"audiences"`
	// If set to true, the original token will be kept for the upstream request.
	ForwardOriginalToken *bool `field:"optional" json:"forwardOriginalToken" yaml:"forwardOriginalToken"`
	// List of header locations from which JWT is expected.
	FromHeaders *[]*RequestAuthenticationSpecJwtRulesFromHeaders `field:"optional" json:"fromHeaders" yaml:"fromHeaders"`
	// List of query parameters from which JWT is expected.
	FromParams *[]*string `field:"optional" json:"fromParams" yaml:"fromParams"`
	// Identifies the issuer that issued the JWT.
	Issuer *string `field:"optional" json:"issuer" yaml:"issuer"`
	// JSON Web Key Set of public keys to validate signature of the JWT.
	Jwks                  *string `field:"optional" json:"jwks" yaml:"jwks"`
	JwksUri               *string `field:"optional" json:"jwksUri" yaml:"jwksUri"`
	OutputPayloadToHeader *string `field:"optional" json:"outputPayloadToHeader" yaml:"outputPayloadToHeader"`
}

type RequestAuthenticationSpecJwtRulesFromHeaders struct {
	// The HTTP header name.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The prefix that should be stripped before decoding the token.
	Prefix *string `field:"optional" json:"prefix" yaml:"prefix"`
}

// Optional.
type RequestAuthenticationSpecSelector struct {
	MatchLabels *map[string]*string `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}
