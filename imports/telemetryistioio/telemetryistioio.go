// telemetryistioio
package telemetryistioio

import (
	_init_ "example.com/cdk8slibrary/imports/telemetryistioio/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"example.com/cdk8slibrary/imports/telemetryistioio/internal"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2"
)

type Telemetry interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for Telemetry
type jsiiProxy_Telemetry struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_Telemetry) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Telemetry) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Telemetry) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Telemetry) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Telemetry) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Telemetry) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Telemetry) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


// Defines a "Telemetry" API object.
func NewTelemetry(scope constructs.Construct, id *string, props *TelemetryProps) Telemetry {
	_init_.Initialize()

	j := jsiiProxy_Telemetry{}

	_jsii_.Create(
		"telemetryistioio.Telemetry",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Defines a "Telemetry" API object.
func NewTelemetry_Override(t Telemetry, scope constructs.Construct, id *string, props *TelemetryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"telemetryistioio.Telemetry",
		[]interface{}{scope, id, props},
		t,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func Telemetry_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"telemetryistioio.Telemetry",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Renders a Kubernetes manifest for "Telemetry".
//
// This can be used to inline resource manifests inside other objects (e.g. as templates).
func Telemetry_Manifest(props *TelemetryProps) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"telemetryistioio.Telemetry",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func Telemetry_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"telemetryistioio.Telemetry",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func Telemetry_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"telemetryistioio.Telemetry",
		"GVK",
		&returns,
	)
	return returns
}

func (t *jsiiProxy_Telemetry) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		t,
		"addDependency",
		args,
	)
}

func (t *jsiiProxy_Telemetry) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		t,
		"addJsonPatch",
		args,
	)
}

func (t *jsiiProxy_Telemetry) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		t,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (t *jsiiProxy_Telemetry) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		t,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

type TelemetryProps struct {
	Metadata *cdk8s.ApiObjectMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// Telemetry configuration for workloads.
	//
	// See more details at: https://istio.io/docs/reference/config/telemetry.html
	Spec *TelemetrySpec `field:"optional" json:"spec" yaml:"spec"`
}

// Telemetry configuration for workloads.
//
// See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpec struct {
	// Optional.
	AccessLogging *[]*TelemetrySpecAccessLogging `field:"optional" json:"accessLogging" yaml:"accessLogging"`
	// Optional.
	Metrics *[]*TelemetrySpecMetrics `field:"optional" json:"metrics" yaml:"metrics"`
	// Optional.
	Selector *TelemetrySpecSelector `field:"optional" json:"selector" yaml:"selector"`
	// Optional.
	Tracing *[]*TelemetrySpecTracing `field:"optional" json:"tracing" yaml:"tracing"`
}

type TelemetrySpecAccessLogging struct {
	// Controls logging.
	Disabled *bool `field:"optional" json:"disabled" yaml:"disabled"`
	// Optional.
	Filter *TelemetrySpecAccessLoggingFilter `field:"optional" json:"filter" yaml:"filter"`
	// Allows tailoring of logging behavior to specific conditions.
	Match *TelemetrySpecAccessLoggingMatch `field:"optional" json:"match" yaml:"match"`
	// Optional.
	Providers *[]*TelemetrySpecAccessLoggingProviders `field:"optional" json:"providers" yaml:"providers"`
}

// Optional.
type TelemetrySpecAccessLoggingFilter struct {
	// CEL expression for selecting when requests/connections should be logged.
	Expression *string `field:"optional" json:"expression" yaml:"expression"`
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessLoggingMatch struct {
	Mode TelemetrySpecAccessLoggingMatchMode `field:"optional" json:"mode" yaml:"mode"`
}

type TelemetrySpecAccessLoggingMatchMode string

const (
	// CLIENT_AND_SERVER.
	TelemetrySpecAccessLoggingMatchMode_CLIENT_AND_SERVER TelemetrySpecAccessLoggingMatchMode = "CLIENT_AND_SERVER"
	// CLIENT.
	TelemetrySpecAccessLoggingMatchMode_CLIENT TelemetrySpecAccessLoggingMatchMode = "CLIENT"
	// SERVER.
	TelemetrySpecAccessLoggingMatchMode_SERVER TelemetrySpecAccessLoggingMatchMode = "SERVER"
)

type TelemetrySpecAccessLoggingProviders struct {
	// Required.
	Name *string `field:"optional" json:"name" yaml:"name"`
}

type TelemetrySpecMetrics struct {
	// Optional.
	Overrides *[]*TelemetrySpecMetricsOverrides `field:"optional" json:"overrides" yaml:"overrides"`
	// Optional.
	Providers *[]*TelemetrySpecMetricsProviders `field:"optional" json:"providers" yaml:"providers"`
}

type TelemetrySpecMetricsOverrides struct {
	// Optional.
	Disabled *bool `field:"optional" json:"disabled" yaml:"disabled"`
	// Match allows provides the scope of the override.
	Match *TelemetrySpecMetricsOverridesMatch `field:"optional" json:"match" yaml:"match"`
	// Optional.
	TagOverrides *map[string]*TelemetrySpecMetricsOverridesTagOverrides `field:"optional" json:"tagOverrides" yaml:"tagOverrides"`
}

// Match allows provides the scope of the override.
type TelemetrySpecMetricsOverridesMatch struct {
	// Allows free-form specification of a metric.
	CustomMetric *string `field:"optional" json:"customMetric" yaml:"customMetric"`
	// One of the well-known Istio Standard Metrics.
	Metric TelemetrySpecMetricsOverridesMatchMetric `field:"optional" json:"metric" yaml:"metric"`
	Mode TelemetrySpecMetricsOverridesMatchMode `field:"optional" json:"mode" yaml:"mode"`
}

// One of the well-known Istio Standard Metrics.
type TelemetrySpecMetricsOverridesMatchMetric string

const (
	// ALL_METRICS.
	TelemetrySpecMetricsOverridesMatchMetric_ALL_METRICS TelemetrySpecMetricsOverridesMatchMetric = "ALL_METRICS"
	// REQUEST_COUNT.
	TelemetrySpecMetricsOverridesMatchMetric_REQUEST_COUNT TelemetrySpecMetricsOverridesMatchMetric = "REQUEST_COUNT"
	// REQUEST_DURATION.
	TelemetrySpecMetricsOverridesMatchMetric_REQUEST_DURATION TelemetrySpecMetricsOverridesMatchMetric = "REQUEST_DURATION"
	// REQUEST_SIZE.
	TelemetrySpecMetricsOverridesMatchMetric_REQUEST_SIZE TelemetrySpecMetricsOverridesMatchMetric = "REQUEST_SIZE"
	// RESPONSE_SIZE.
	TelemetrySpecMetricsOverridesMatchMetric_RESPONSE_SIZE TelemetrySpecMetricsOverridesMatchMetric = "RESPONSE_SIZE"
	// TCP_OPENED_CONNECTIONS.
	TelemetrySpecMetricsOverridesMatchMetric_TCP_OPENED_CONNECTIONS TelemetrySpecMetricsOverridesMatchMetric = "TCP_OPENED_CONNECTIONS"
	// TCP_CLOSED_CONNECTIONS.
	TelemetrySpecMetricsOverridesMatchMetric_TCP_CLOSED_CONNECTIONS TelemetrySpecMetricsOverridesMatchMetric = "TCP_CLOSED_CONNECTIONS"
	// TCP_SENT_BYTES.
	TelemetrySpecMetricsOverridesMatchMetric_TCP_SENT_BYTES TelemetrySpecMetricsOverridesMatchMetric = "TCP_SENT_BYTES"
	// TCP_RECEIVED_BYTES.
	TelemetrySpecMetricsOverridesMatchMetric_TCP_RECEIVED_BYTES TelemetrySpecMetricsOverridesMatchMetric = "TCP_RECEIVED_BYTES"
	// GRPC_REQUEST_MESSAGES.
	TelemetrySpecMetricsOverridesMatchMetric_GRPC_REQUEST_MESSAGES TelemetrySpecMetricsOverridesMatchMetric = "GRPC_REQUEST_MESSAGES"
	// GRPC_RESPONSE_MESSAGES.
	TelemetrySpecMetricsOverridesMatchMetric_GRPC_RESPONSE_MESSAGES TelemetrySpecMetricsOverridesMatchMetric = "GRPC_RESPONSE_MESSAGES"
)

type TelemetrySpecMetricsOverridesMatchMode string

const (
	// CLIENT_AND_SERVER.
	TelemetrySpecMetricsOverridesMatchMode_CLIENT_AND_SERVER TelemetrySpecMetricsOverridesMatchMode = "CLIENT_AND_SERVER"
	// CLIENT.
	TelemetrySpecMetricsOverridesMatchMode_CLIENT TelemetrySpecMetricsOverridesMatchMode = "CLIENT"
	// SERVER.
	TelemetrySpecMetricsOverridesMatchMode_SERVER TelemetrySpecMetricsOverridesMatchMode = "SERVER"
)

type TelemetrySpecMetricsOverridesTagOverrides struct {
	// Operation controls whether or not to update/add a tag, or to remove it.
	Operation TelemetrySpecMetricsOverridesTagOverridesOperation `field:"optional" json:"operation" yaml:"operation"`
	// Value is only considered if the operation is `UPSERT`.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Operation controls whether or not to update/add a tag, or to remove it.
type TelemetrySpecMetricsOverridesTagOverridesOperation string

const (
	// UPSERT.
	TelemetrySpecMetricsOverridesTagOverridesOperation_UPSERT TelemetrySpecMetricsOverridesTagOverridesOperation = "UPSERT"
	// REMOVE.
	TelemetrySpecMetricsOverridesTagOverridesOperation_REMOVE TelemetrySpecMetricsOverridesTagOverridesOperation = "REMOVE"
)

type TelemetrySpecMetricsProviders struct {
	// Required.
	Name *string `field:"optional" json:"name" yaml:"name"`
}

// Optional.
type TelemetrySpecSelector struct {
	MatchLabels *map[string]*string `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type TelemetrySpecTracing struct {
	// Optional.
	CustomTags *map[string]*TelemetrySpecTracingCustomTags `field:"optional" json:"customTags" yaml:"customTags"`
	// Controls span reporting.
	DisableSpanReporting *bool `field:"optional" json:"disableSpanReporting" yaml:"disableSpanReporting"`
	// Allows tailoring of behavior to specific conditions.
	Match *TelemetrySpecTracingMatch `field:"optional" json:"match" yaml:"match"`
	// Optional.
	Providers *[]*TelemetrySpecTracingProviders `field:"optional" json:"providers" yaml:"providers"`
	RandomSamplingPercentage *float64 `field:"optional" json:"randomSamplingPercentage" yaml:"randomSamplingPercentage"`
	UseRequestIdForTraceSampling *bool `field:"optional" json:"useRequestIdForTraceSampling" yaml:"useRequestIdForTraceSampling"`
}

type TelemetrySpecTracingCustomTags struct {
	// Environment adds the value of an environment variable to each span.
	Environment *TelemetrySpecTracingCustomTagsEnvironment `field:"optional" json:"environment" yaml:"environment"`
	Header *TelemetrySpecTracingCustomTagsHeader `field:"optional" json:"header" yaml:"header"`
	// Literal adds the same, hard-coded value to each span.
	Literal *TelemetrySpecTracingCustomTagsLiteral `field:"optional" json:"literal" yaml:"literal"`
}

// Environment adds the value of an environment variable to each span.
type TelemetrySpecTracingCustomTagsEnvironment struct {
	// Optional.
	DefaultValue *string `field:"optional" json:"defaultValue" yaml:"defaultValue"`
	// Name of the environment variable from which to extract the tag value.
	Name *string `field:"optional" json:"name" yaml:"name"`
}

type TelemetrySpecTracingCustomTagsHeader struct {
	// Optional.
	DefaultValue *string `field:"optional" json:"defaultValue" yaml:"defaultValue"`
	// Name of the header from which to extract the tag value.
	Name *string `field:"optional" json:"name" yaml:"name"`
}

// Literal adds the same, hard-coded value to each span.
type TelemetrySpecTracingCustomTagsLiteral struct {
	// The tag value to use.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatch struct {
	Mode TelemetrySpecTracingMatchMode `field:"optional" json:"mode" yaml:"mode"`
}

type TelemetrySpecTracingMatchMode string

const (
	// CLIENT_AND_SERVER.
	TelemetrySpecTracingMatchMode_CLIENT_AND_SERVER TelemetrySpecTracingMatchMode = "CLIENT_AND_SERVER"
	// CLIENT.
	TelemetrySpecTracingMatchMode_CLIENT TelemetrySpecTracingMatchMode = "CLIENT"
	// SERVER.
	TelemetrySpecTracingMatchMode_SERVER TelemetrySpecTracingMatchMode = "SERVER"
)

type TelemetrySpecTracingProviders struct {
	// Required.
	Name *string `field:"optional" json:"name" yaml:"name"`
}

